I didn't find better for the globalPath than using BFS
I tried to also generate the path using the least possible spots but it worked less (advantage : less different spots in A, I can variabilize it more ; drawback : longer path so more often I have to reactivate red lights :s)

I try to generate a A with some compromize (magic numbers) between 3 criterions :
including the subpaths the most often present in the globalPath
choose long subpaths (to be able to turn all of them green in one action) but not too long (because this subpath would take too much space in A)
choose subpaths including dots that are rarely already included in A (I should have tuned that more) => to increase diversity of A
all dots in globalPath have to be present in A

then process moves greedily
if next step in globalPath is green just move
else if another alternative is green, just change the global path (depth 2)
else do the mutation : add a new part of A to B (mutate B)
take the mutation which will maximize the amount of next successive moves in first-steply computed globalPath that will be green 
I can't compute and score all available moves (mutations) because of timeouts but I try a lot of stuff üò¶ 

anyway I should have converted this in another language because I had to crop those approx heuristics because they take too much time to do them with a better space search => take the best combination of "add a new part of A to B (mutate B)" while processing moves üò¶ 
I lacked time for atcoder during 4 succesive days, but the rest of the time was ok
or find a better approach but I couldn't find it :p

FR √† mieux r√©√©crire :

j'ai g√©n√©r√© un path global (for now BFS mais je peux changer pour trouver un path avec le moins possible de nodes pour r√©duire le nb de feux √† g√©rer)

 et ensuite je g√©n√®re le A 
en fonction des subpaths qui sont souvent pr√©sents dans le path global (je les mets tels quels dans le A) => optimisation de la r√©partition
en essayant aussi d'uniformiser √† peu pr√®s le nombre d'occurrences de chaque node visit√© dans le path global dans le A
ne pas ajouter dans le A les nodes qui ne sont pas pr√©vus dans le chemin global

ensuite lors du parcours j'active les feux en fonction de l'optimisation du nombre de noeuds successifs du chemin global qui arrivent

en fait le pbm de ces id√©es c'est les timeouts donc je dois les limiter √† fond c'est chiant (avec des crit√®res sur des seuils ou sur le temps)

Mais ensuite quand (dans un cas de blocage) tu prends le tron√ßon le plus efficace pour optimiser ton B pour les prochains moves, je peux pas tester toutes les combinaisons, c'est bcp trop lent 
Je ne simule qu'une partie des possibilit√©s
Y a mati√®re √† y gagner ici
Soit remplacer tout le B par un tron√ßon choisi de A
Soit remplacer juste un bout du B par un nouveau tron√ßon pertinent du A
Dans le but de r√©cup√©rer le A qui te donne le plus de moves successifs faisables sans devoir faire de mutation pendant cette s√©rie de moves 

Ensuite petit improve en modifiant l√©g√®rement le path global si la next case est rouge mais un chemin est vert et peut d√©boucher sur la  m√™me case suivante.

