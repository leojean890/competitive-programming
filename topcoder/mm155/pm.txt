Hello ! Thanks @dimkadimon to create these amazing optim contests, and congratz to top players to have reached such huge perfs.

I reached 77 pts (rank 24/64 in provisional) using the following overall aproach :

In the first step, I use a random-greedy approach. 

I construct some solutions during 1 second the folloing way :
I generate pseudo random moves in reverse order such as :
If I find at least a square with a 5 multiplier, I choose randomly one of those. 
Else if I find at least a square with a 3 multiplier, I choose randomly one of those. 
And so on (resp 2 or 1 multiplier)

When I choose the next node, I only take nodes if they have at least a possible son (targettable square) to avoid being blocked the next turn.

In the second step, I use a random-probabilistic approach in reverse order during another second:
I use a bigger probability to take spots with big multipliers in the beginning.
Used probas may be 5-3-2-1 or 20-12-8-1.

In the third step, I use SA to optimize the best solution found during the first two steps, using the same probabilities described upper to choose the next node.

In the fourth and last step, I do some post-procssing in order to improve my best found solution.

I do the following steps several times and take as final solution to be outputted the best found result this way :
For each pair of dots A-B from my list, I check if I can find C such as A-C-B is valid (concerning arrows). If so I take one of them randomly.
Then I check A-C to see if I can insert some other move in between them.
And so on, until the end of the solution, to optimize it maximally.

But I may have done better if I used beam search or so :)
I thought that it was too hard to use such approach considering the branching, but some top players proved me wrong !

I shared my final code here :
https://github.com/leojean890/competitive-programming/blob/main/topcoder/mm155/finalSubmit.java
