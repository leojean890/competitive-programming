Hello ! Thanks @dimkadimon to create these amazing topics, and congratz to top players to have reached those scores

I reached 77 pts using the following aproach :

In the first step, I use random-greedy approach: I generate pseudo random moves in reverse order during 1 second :

I construct a solution the folloing way :
If I find at least a square with a 5 multiplier, I choose randomly one of those. 
Else if I find at least a square with 3 multiplier, I choose randomly one of those. 
And so on

When I choose the next node, I only take nodes if they have at least a possible son (targettable square).

In the seoond step, I use random-probabilistic approach during another second:

I use a bigger proba to take spots with big multipliers (5-3-2-1) or (20-12-8-1)

In the third step, I use SA to optimize the best found solution found during the first to steps, using the same probabilities.

In the fourth and last step, I do some post-procssing from my best found list : 

For each pair of dots A-B from my best moves final list, I check if I can find C such as A-C-B is valid. If so I take it.

Then I check A-C to see if I can insert some other move.

And so on, until the end of the solution, to optimize it maximally.

But it could have been better if I used beam search or so :)
I thought it was too hard considering the branching :D
